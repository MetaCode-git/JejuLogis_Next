# GitHub Actions CI/CD 파이프라인
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 코드 품질 검사
  lint:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: ESLint 실행
        run: npm run lint

      - name: Prettier 검사
        run: npm run format:check

      - name: TypeScript 타입 검사
        run: npm run type-check

  # 단위 테스트
  test:
    name: 단위 테스트
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: Jest 테스트 실행
        run: npm run test:coverage

      - name: 코드 커버리지 업로드
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # E2E 테스트
  e2e:
    name: E2E 테스트
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: Playwright 설치
        run: npx playwright install --with-deps

      - name: 애플리케이션 빌드
        run: npm run build

      - name: Playwright 테스트 실행
        run: npm run test:e2e
        env:
          NODE_ENV: test

      - name: Playwright 보고서 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # 보안 검사
  security:
    name: 보안 검사
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: 보안 취약점 검사
        run: npm audit --audit-level=moderate

      - name: CodeQL 분석 시작
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: 자동 빌드 수행
        uses: github/codeql-action/autobuild@v3

      - name: CodeQL 분석 완료
        uses: github/codeql-action/analyze@v3

  # 성능 테스트
  lighthouse:
    name: Lighthouse 성능 검사
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: 애플리케이션 빌드
        run: npm run build

      - name: 애플리케이션 시작
        run: npm start &
        env:
          NODE_ENV: production

      - name: 애플리케이션 대기
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

      - name: Lighthouse CI 실행
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Docker 빌드 및 푸시
  docker:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Container Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 배포 (프로덕션)
  deploy:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [docker, lighthouse, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://jejutaksong.com

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 배포 알림 (시작)
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🚀 제주탁송 웹사이트 배포가 시작되었습니다.",
              "attachments": [{
                "color": "warning",
                "fields": [{
                  "title": "커밋",
                  "value": "${{ github.sha }}",
                  "short": true
                }, {
                  "title": "브랜치",
                  "value": "${{ github.ref }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

      # 실제 배포 단계 (서버별로 커스터마이징 필요)
      - name: 서버 배포
        run: |
          echo "배포 스크립트 실행 중..."
          # 실제 배포 명령어들을 여기에 추가
          # 예: SSH를 통한 서버 연결, Docker Compose 실행 등

      - name: 배포 상태 확인
        run: |
          timeout 60 bash -c 'until curl -f https://jejutaksong.com/api/health; do sleep 10; done'

      - name: 배포 알림 (완료)
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          custom_payload: |
            {
              "text": "${{ job.status == 'success' && '✅ 제주탁송 웹사이트가 성공적으로 배포되었습니다!' || '❌  제주탁송 웹사이트 배포가 실패했습니다.' }}",
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "fields": [{
                  "title": "URL",
                  "value": "https://jejutaksong.com",
                  "short": true
                }, {
                  "title": "상태",
                  "value": "${{ job.status }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()